{"ast":null,"code":"import { takeLatest, call, put, all } from 'redux-saga/effects';\nimport { auth, googleProvider, convertCollectionsSnapshotToMap, createUser } from '../../../firebase/firebase.util';\nimport { SAGA_EMAIL_USER_START, SAGA_GOOGLE_USER_START } from './type';\nimport { sagaEmailUserSuccess, sagaEmailUserFailed, sagaGoogleUserFailed, sagaGoogleUserSUCCESS } from './user-action';\n\nfunction* startGoogle() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    const data = yield call(convertCollectionsSnapshotToMap, user);\n    const userSnapshot = yield data.get();\n    yield put(sagaGoogleUserSUCCESS({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (e) {\n    yield put(sagaGoogleUserFailed(e.message));\n  }\n}\n\nexport function* sagaGoogleUserStart() {\n  yield takeLatest(SAGA_GOOGLE_USER_START, startGoogle);\n}\nexport function* getSnapshotFromUserAuth(userAuth, additionalData) {\n  try {\n    const userRef = yield call(createUser, userAuth, additionalData);\n    const userSnapshop = yield userRef.get();\n    yield put(SAGA_EMAIL_USER_SUCCESS({\n      id: userSnapshop.id,\n      ...userSnapshop.data()\n    }));\n  } catch (e) {\n    put(SAGA_EMAIL_USER_FAILED(e.message));\n  }\n}\n\nfunction* startEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapshotFromUserAuth(user);\n  } catch (e) {\n    yield put(sagaEmailUserFailed(e.message));\n  }\n}\n\nexport function* sagaEmailUserStart() {\n  yield takeLatest(SAGA_EMAIL_USER_START, startEmail);\n}\nexport function* userSagas() {\n  yield all([call(sagaGoogleUserStart), call(sagaEmailUserStart)]);\n}","map":{"version":3,"sources":["/Users/gordon/mywork/mytraining/2020-v1/complete-react-developer-in-2020-fromPaul/crown-app/src/components/redux/user/user-sagas.js"],"names":["takeLatest","call","put","all","auth","googleProvider","convertCollectionsSnapshotToMap","createUser","SAGA_EMAIL_USER_START","SAGA_GOOGLE_USER_START","sagaEmailUserSuccess","sagaEmailUserFailed","sagaGoogleUserFailed","sagaGoogleUserSUCCESS","startGoogle","user","signInWithPopup","data","userSnapshot","get","id","e","message","sagaGoogleUserStart","getSnapshotFromUserAuth","userAuth","additionalData","userRef","userSnapshop","SAGA_EMAIL_USER_SUCCESS","SAGA_EMAIL_USER_FAILED","startEmail","payload","email","password","signInWithEmailAndPassword","sagaEmailUserStart","userSagas"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,IAArB,EAA2BC,GAA3B,EAAgCC,GAAhC,QAA2C,oBAA3C;AAEA,SAASC,IAAT,EAAeC,cAAf,EAA+BC,+BAA/B,EAAgEC,UAAhE,QAAkF,iCAAlF;AACA,SAASC,qBAAT,EAAgCC,sBAAhC,QAA8D,QAA9D;AACA,SAASC,oBAAT,EAA+BC,mBAA/B,EAAoDC,oBAApD,EAA0EC,qBAA1E,QAAuG,eAAvG;;AAIA,UAAUC,WAAV,GAAwB;AACpB,MAAI;AAEA,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMX,IAAI,CAACY,eAAL,CAAqBX,cAArB,CAAvB;AAEA,UAAMY,IAAI,GAAG,MAAMhB,IAAI,CAACK,+BAAD,EAAkCS,IAAlC,CAAvB;AACA,UAAMG,YAAY,GAAG,MAAMD,IAAI,CAACE,GAAL,EAA3B;AAEA,UAAMjB,GAAG,CAACW,qBAAqB,CAAC;AAACO,MAAAA,EAAE,EAAEF,YAAY,CAACE,EAAlB;AAAsB,SAAGF,YAAY,CAACD,IAAb;AAAzB,KAAD,CAAtB,CAAT;AACH,GARD,CAQE,OAAOI,CAAP,EAAU;AACR,UAAMnB,GAAG,CAACU,oBAAoB,CAACS,CAAC,CAACC,OAAH,CAArB,CAAT;AACH;AACJ;;AAED,OAAO,UAAUC,mBAAV,GAAgC;AAEnC,QAAMvB,UAAU,CAACS,sBAAD,EAAyBK,WAAzB,CAAhB;AACH;AAED,OAAO,UAAUU,uBAAV,CAAkCC,QAAlC,EAA4CC,cAA5C,EAA4D;AAC/D,MAAI;AACA,UAAMC,OAAO,GAAG,MAAM1B,IAAI,CAACM,UAAD,EAAakB,QAAb,EAAuBC,cAAvB,CAA1B;AACA,UAAME,YAAY,GAAG,MAAMD,OAAO,CAACR,GAAR,EAA3B;AACA,UAAMjB,GAAG,CAAC2B,uBAAuB,CAAC;AAAET,MAAAA,EAAE,EAAEQ,YAAY,CAACR,EAAnB;AAAuB,SAAGQ,YAAY,CAACX,IAAb;AAA1B,KAAD,CAAxB,CAAT;AACH,GAJD,CAIC,OAAMI,CAAN,EAAS;AACNnB,IAAAA,GAAG,CAAC4B,sBAAsB,CAACT,CAAC,CAACC,OAAH,CAAvB,CAAH;AACH;AACJ;;AAGD,UAAUS,UAAV,CAAqB;AAAEC,EAAAA,OAAO,EAAE;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT;AAAX,CAArB,EAAsD;AAClD,MAAI;AACA,UAAM;AAAEnB,MAAAA;AAAF,QAAW,MAAMX,IAAI,CAAC+B,0BAAL,CAAgCF,KAAhC,EAAuCC,QAAvC,CAAvB;AACA,UAAMV,uBAAuB,CAACT,IAAD,CAA7B;AACH,GAHD,CAGC,OAAMM,CAAN,EAAS;AACN,UAAMnB,GAAG,CAACS,mBAAmB,CAACU,CAAC,CAACC,OAAH,CAApB,CAAT;AACH;AACJ;;AAED,OAAO,UAAUc,kBAAV,GAA+B;AAClC,QAAMpC,UAAU,CAACQ,qBAAD,EAAwBuB,UAAxB,CAAhB;AACH;AAED,OAAO,UAAUM,SAAV,GAAsB;AACzB,QAAMlC,GAAG,CAAC,CAACF,IAAI,CAACsB,mBAAD,CAAL,EAA4BtB,IAAI,CAACmC,kBAAD,CAAhC,CAAD,CAAT;AACH","sourcesContent":["import { takeLatest, call, put, all } from 'redux-saga/effects';\n\nimport { auth, googleProvider, convertCollectionsSnapshotToMap, createUser } from '../../../firebase/firebase.util';\nimport { SAGA_EMAIL_USER_START, SAGA_GOOGLE_USER_START } from './type';\nimport { sagaEmailUserSuccess, sagaEmailUserFailed, sagaGoogleUserFailed, sagaGoogleUserSUCCESS } from './user-action';\n\n\n\nfunction* startGoogle() {\n    try {\n      \n        const { user } = yield auth.signInWithPopup(googleProvider);\n\n        const data = yield call(convertCollectionsSnapshotToMap, user);\n        const userSnapshot = yield data.get();\n\n        yield put(sagaGoogleUserSUCCESS({id: userSnapshot.id, ...userSnapshot.data()}))\n    } catch (e) {\n        yield put(sagaGoogleUserFailed(e.message));\n    }\n}\n\nexport function* sagaGoogleUserStart() {\n \n    yield takeLatest(SAGA_GOOGLE_USER_START, startGoogle);\n}\n\nexport function* getSnapshotFromUserAuth(userAuth, additionalData) {\n    try {\n        const userRef = yield call(createUser, userAuth, additionalData );\n        const userSnapshop = yield userRef.get();\n        yield put(SAGA_EMAIL_USER_SUCCESS({ id: userSnapshop.id, ...userSnapshop.data()}))\n    }catch(e) {\n        put(SAGA_EMAIL_USER_FAILED(e.message));\n    }\n}\n\n\nfunction* startEmail({ payload: { email, password }}) {\n    try {\n        const { user } = yield auth.signInWithEmailAndPassword(email, password);\n        yield getSnapshotFromUserAuth(user);\n    }catch(e) {\n        yield put(sagaEmailUserFailed(e.message));\n    }\n}\n\nexport function* sagaEmailUserStart() {\n    yield takeLatest(SAGA_EMAIL_USER_START, startEmail);\n}\n\nexport function* userSagas() {\n    yield all([call(sagaGoogleUserStart), call(sagaEmailUserStart)]);\n}"]},"metadata":{},"sourceType":"module"}