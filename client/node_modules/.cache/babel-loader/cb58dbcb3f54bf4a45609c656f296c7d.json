{"ast":null,"code":"import { takeLatest, call, put, all } from 'redux-saga/effects';\nimport { auth, googleProvider, convertCollectionsSnapshotToMap, createUser } from '../../../firebase/firebase.util';\nimport { SAGA_EMAIL_USER_START, SAGA_GOOGLE_USER_START } from './type';\nimport { sagaUserSUCCESS, sagaUserFailed } from './user-action';\n\nfunction* getSnapshotFromUserAuth(userAuth, additionData) {\n  try {\n    const data = yield call(createUser, userAuth, additionData);\n    const userSnapshot = yield data.get();\n    yield put(sagaUserSUCCESS({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (e) {\n    yield put(sagaUserFailed(e.message));\n  }\n}\n\nfunction* startGoogle() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    yield getSnapshotFromUserAuth(user); // const data = yield call(convertCollectionsSnapshotToMap, user);\n    // const userSnapshot = yield data.get();\n    // yield put(sagaUserSUCCESS({id: userSnapshot.id, ...userSnapshot.data()}))\n  } catch (e) {\n    yield put(sagaUserFailed(e.message));\n  }\n}\n\nexport function* sagaGoogleUserStart() {\n  yield takeLatest(SAGA_GOOGLE_USER_START, startGoogle);\n}\n/*\nexport function* getSnapshotFromUserAuth(userAuth, additionalData) {\n    try {\n        const userRef = yield call(createUser, userAuth, additionalData );\n        const userSnapshop = yield userRef.get();\n        yield put(sagaUserSUCCESS({ id: userSnapshop.id, ...userSnapshop.data()}))\n    }catch(e) {\n        put(sagaUserFailed(e.message));\n    }\n}\n*/\n\nfunction* startEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapshotFromUserAuth(user);\n  } catch (e) {\n    yield put(sagaUserFailed(e.message));\n  }\n}\n\nexport function* sagaEmailUserStart() {\n  yield takeLatest(SAGA_EMAIL_USER_START, startEmail);\n}\nexport function* userSagas() {\n  yield all([call(sagaGoogleUserStart), call(sagaEmailUserStart)]);\n}","map":{"version":3,"sources":["/Users/gordon/mywork/mytraining/2020-v1/complete-react-developer-in-2020-fromPaul/crown-app/src/components/redux/user/user-sagas.js"],"names":["takeLatest","call","put","all","auth","googleProvider","convertCollectionsSnapshotToMap","createUser","SAGA_EMAIL_USER_START","SAGA_GOOGLE_USER_START","sagaUserSUCCESS","sagaUserFailed","getSnapshotFromUserAuth","userAuth","additionData","data","userSnapshot","get","id","e","message","startGoogle","user","signInWithPopup","sagaGoogleUserStart","startEmail","payload","email","password","signInWithEmailAndPassword","sagaEmailUserStart","userSagas"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,IAArB,EAA2BC,GAA3B,EAAgCC,GAAhC,QAA2C,oBAA3C;AAEA,SAASC,IAAT,EAAeC,cAAf,EAA+BC,+BAA/B,EAAgEC,UAAhE,QAAkF,iCAAlF;AACA,SAASC,qBAAT,EAAgCC,sBAAhC,QAA8D,QAA9D;AACA,SAASC,eAAT,EAA0BC,cAA1B,QAAgD,eAAhD;;AAEA,UAAUC,uBAAV,CAAkCC,QAAlC,EAA4CC,YAA5C,EAA0D;AACtD,MAAG;AACC,UAAMC,IAAI,GAAG,MAAMd,IAAI,CAACM,UAAD,EAAaM,QAAb,EAAuBC,YAAvB,CAAvB;AACA,UAAME,YAAY,GAAG,MAAMD,IAAI,CAACE,GAAL,EAA3B;AACA,UAAMf,GAAG,CAACQ,eAAe,CAAC;AAACQ,MAAAA,EAAE,EAAEF,YAAY,CAACE,EAAlB;AAAsB,SAAGF,YAAY,CAACD,IAAb;AAAzB,KAAD,CAAhB,CAAT;AACH,GAJD,CAIC,OAAMI,CAAN,EAAS;AACN,UAAMjB,GAAG,CAACS,cAAc,CAACQ,CAAC,CAACC,OAAH,CAAf,CAAT;AACH;AACJ;;AAED,UAAUC,WAAV,GAAwB;AACpB,MAAI;AAEA,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMlB,IAAI,CAACmB,eAAL,CAAqBlB,cAArB,CAAvB;AACA,UAAMO,uBAAuB,CAACU,IAAD,CAA7B,CAHA,CAIA;AACA;AAEA;AACH,GARD,CAQE,OAAOH,CAAP,EAAU;AACR,UAAMjB,GAAG,CAACS,cAAc,CAACQ,CAAC,CAACC,OAAH,CAAf,CAAT;AACH;AACJ;;AAED,OAAO,UAAUI,mBAAV,GAAgC;AAEnC,QAAMxB,UAAU,CAACS,sBAAD,EAAyBY,WAAzB,CAAhB;AACH;AACD;;;;;;;;;;;;AAYA,UAAUI,UAAV,CAAqB;AAAEC,EAAAA,OAAO,EAAE;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT;AAAX,CAArB,EAAsD;AAClD,MAAI;AACA,UAAM;AAAEN,MAAAA;AAAF,QAAW,MAAMlB,IAAI,CAACyB,0BAAL,CAAgCF,KAAhC,EAAuCC,QAAvC,CAAvB;AACA,UAAMhB,uBAAuB,CAACU,IAAD,CAA7B;AACH,GAHD,CAGC,OAAMH,CAAN,EAAS;AACN,UAAMjB,GAAG,CAACS,cAAc,CAACQ,CAAC,CAACC,OAAH,CAAf,CAAT;AACH;AACJ;;AAED,OAAO,UAAUU,kBAAV,GAA+B;AAClC,QAAM9B,UAAU,CAACQ,qBAAD,EAAwBiB,UAAxB,CAAhB;AACH;AAED,OAAO,UAAUM,SAAV,GAAsB;AACzB,QAAM5B,GAAG,CAAC,CAACF,IAAI,CAACuB,mBAAD,CAAL,EAA4BvB,IAAI,CAAC6B,kBAAD,CAAhC,CAAD,CAAT;AACH","sourcesContent":["import { takeLatest, call, put, all } from 'redux-saga/effects';\n\nimport { auth, googleProvider, convertCollectionsSnapshotToMap, createUser } from '../../../firebase/firebase.util';\nimport { SAGA_EMAIL_USER_START, SAGA_GOOGLE_USER_START } from './type';\nimport { sagaUserSUCCESS, sagaUserFailed } from './user-action';\n\nfunction* getSnapshotFromUserAuth(userAuth, additionData) {\n    try{\n        const data = yield call(createUser, userAuth, additionData);\n        const userSnapshot = yield data.get();\n        yield put(sagaUserSUCCESS({id: userSnapshot.id, ...userSnapshot.data()}));\n    }catch(e) {\n        yield put(sagaUserFailed(e.message));\n    }\n}\n\nfunction* startGoogle() {\n    try {\n      \n        const { user } = yield auth.signInWithPopup(googleProvider);\n        yield getSnapshotFromUserAuth(user);\n        // const data = yield call(convertCollectionsSnapshotToMap, user);\n        // const userSnapshot = yield data.get();\n\n        // yield put(sagaUserSUCCESS({id: userSnapshot.id, ...userSnapshot.data()}))\n    } catch (e) {\n        yield put(sagaUserFailed(e.message));\n    }\n}\n\nexport function* sagaGoogleUserStart() {\n \n    yield takeLatest(SAGA_GOOGLE_USER_START, startGoogle);\n}\n/*\nexport function* getSnapshotFromUserAuth(userAuth, additionalData) {\n    try {\n        const userRef = yield call(createUser, userAuth, additionalData );\n        const userSnapshop = yield userRef.get();\n        yield put(sagaUserSUCCESS({ id: userSnapshop.id, ...userSnapshop.data()}))\n    }catch(e) {\n        put(sagaUserFailed(e.message));\n    }\n}\n*/\n\nfunction* startEmail({ payload: { email, password }}) {\n    try {\n        const { user } = yield auth.signInWithEmailAndPassword(email, password);\n        yield getSnapshotFromUserAuth(user);\n    }catch(e) {\n        yield put(sagaUserFailed(e.message));\n    }\n}\n\nexport function* sagaEmailUserStart() {\n    yield takeLatest(SAGA_EMAIL_USER_START, startEmail);\n}\n\nexport function* userSagas() {\n    yield all([call(sagaGoogleUserStart), call(sagaEmailUserStart)]);\n}"]},"metadata":{},"sourceType":"module"}