{"ast":null,"code":"import { takeLatest, call, put, all } from 'redux-saga/effects';\nimport { auth, googleProvider, convertCollectionsSnapshotToMap, createUser, getCurrentUser } from '../../../firebase/firebase.util';\nimport { SAGA_EMAIL_USER_START, SAGA_GOOGLE_USER_START, CHECK_USER_SESSION } from './type';\nimport { sagaUserSUCCESS, sagaUserFailed } from './user-action';\n\nfunction* getSnapshotFromUserAuth(userAuth, additionData) {\n  try {\n    const data = yield call(createUser, userAuth, additionData);\n    const userSnapshot = yield data.get();\n    yield put(sagaUserSUCCESS({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (e) {\n    yield put(sagaUserFailed(e.message));\n  }\n}\n/* Google login */\n\n\nfunction* startGoogle() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    yield getSnapshotFromUserAuth(user);\n  } catch (e) {\n    yield put(sagaUserFailed(e.message));\n  }\n}\n\nexport function* sagaGoogleUserStart() {\n  yield takeLatest(SAGA_GOOGLE_USER_START, startGoogle);\n}\n/* Email login */\n\nfunction* startEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapshotFromUserAuth(user);\n  } catch (e) {\n    yield put(sagaUserFailed(e.message));\n  }\n}\n\nexport function* sagaEmailUserStart() {\n  yield takeLatest(SAGA_EMAIL_USER_START, startEmail);\n}\n/* check user */\n\nfunction* startCheckUserSession() {\n  try {\n    const userAuth = yield getCurrentUser();\n    yield getSnapshotFromUserAuth(userAuth);\n  } catch (e) {\n    yield put(sagaUserFailed(e.message));\n  }\n}\n\nexport function* sagaCheckUserSession() {\n  yield takeLatest(CHECK_USER_SESSION, startCheckUserSession);\n}\nexport function* userSagas() {\n  yield all([call(sagaGoogleUserStart), call(sagaEmailUserStart)]);\n}","map":{"version":3,"sources":["/Users/gordon/mywork/mytraining/2020-v1/complete-react-developer-in-2020-fromPaul/crown-app/src/components/redux/user/user-sagas.js"],"names":["takeLatest","call","put","all","auth","googleProvider","convertCollectionsSnapshotToMap","createUser","getCurrentUser","SAGA_EMAIL_USER_START","SAGA_GOOGLE_USER_START","CHECK_USER_SESSION","sagaUserSUCCESS","sagaUserFailed","getSnapshotFromUserAuth","userAuth","additionData","data","userSnapshot","get","id","e","message","startGoogle","user","signInWithPopup","sagaGoogleUserStart","startEmail","payload","email","password","signInWithEmailAndPassword","sagaEmailUserStart","startCheckUserSession","sagaCheckUserSession","userSagas"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,IAArB,EAA2BC,GAA3B,EAAgCC,GAAhC,QAA2C,oBAA3C;AAEA,SAASC,IAAT,EAAeC,cAAf,EAA+BC,+BAA/B,EAAgEC,UAAhE,EAA4EC,cAA5E,QAAkG,iCAAlG;AACA,SAASC,qBAAT,EAAgCC,sBAAhC,EAAwDC,kBAAxD,QAAkF,QAAlF;AACA,SAASC,eAAT,EAA0BC,cAA1B,QAAgD,eAAhD;;AAEA,UAAUC,uBAAV,CAAkCC,QAAlC,EAA4CC,YAA5C,EAA0D;AACtD,MAAG;AACC,UAAMC,IAAI,GAAG,MAAMhB,IAAI,CAACM,UAAD,EAAaQ,QAAb,EAAuBC,YAAvB,CAAvB;AACA,UAAME,YAAY,GAAG,MAAMD,IAAI,CAACE,GAAL,EAA3B;AACA,UAAMjB,GAAG,CAACU,eAAe,CAAC;AAACQ,MAAAA,EAAE,EAAEF,YAAY,CAACE,EAAlB;AAAsB,SAAGF,YAAY,CAACD,IAAb;AAAzB,KAAD,CAAhB,CAAT;AACH,GAJD,CAIC,OAAMI,CAAN,EAAS;AACN,UAAMnB,GAAG,CAACW,cAAc,CAACQ,CAAC,CAACC,OAAH,CAAf,CAAT;AACH;AACJ;AAED;;;AACA,UAAUC,WAAV,GAAwB;AACpB,MAAI;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMpB,IAAI,CAACqB,eAAL,CAAqBpB,cAArB,CAAvB;AACA,UAAMS,uBAAuB,CAACU,IAAD,CAA7B;AACH,GAHD,CAGE,OAAOH,CAAP,EAAU;AACR,UAAMnB,GAAG,CAACW,cAAc,CAACQ,CAAC,CAACC,OAAH,CAAf,CAAT;AACH;AACJ;;AAED,OAAO,UAAUI,mBAAV,GAAgC;AAEnC,QAAM1B,UAAU,CAACU,sBAAD,EAAyBa,WAAzB,CAAhB;AACH;AAED;;AACA,UAAUI,UAAV,CAAqB;AAAEC,EAAAA,OAAO,EAAE;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT;AAAX,CAArB,EAAsD;AAClD,MAAI;AACA,UAAM;AAAEN,MAAAA;AAAF,QAAW,MAAMpB,IAAI,CAAC2B,0BAAL,CAAgCF,KAAhC,EAAuCC,QAAvC,CAAvB;AACA,UAAMhB,uBAAuB,CAACU,IAAD,CAA7B;AACH,GAHD,CAGC,OAAMH,CAAN,EAAS;AACN,UAAMnB,GAAG,CAACW,cAAc,CAACQ,CAAC,CAACC,OAAH,CAAf,CAAT;AACH;AACJ;;AAED,OAAO,UAAUU,kBAAV,GAA+B;AAClC,QAAMhC,UAAU,CAACS,qBAAD,EAAwBkB,UAAxB,CAAhB;AACH;AAED;;AAEA,UAAUM,qBAAV,GAAkC;AAC9B,MAAI;AACA,UAAMlB,QAAQ,GAAG,MAAMP,cAAc,EAArC;AACA,UAAMM,uBAAuB,CAACC,QAAD,CAA7B;AACH,GAHD,CAGC,OAAMM,CAAN,EAAS;AACN,UAAMnB,GAAG,CAACW,cAAc,CAACQ,CAAC,CAACC,OAAH,CAAf,CAAT;AACH;AACJ;;AACD,OAAO,UAAUY,oBAAV,GAAiC;AACpC,QAAMlC,UAAU,CAACW,kBAAD,EAAqBsB,qBAArB,CAAhB;AACH;AAGD,OAAO,UAAUE,SAAV,GAAsB;AACzB,QAAMhC,GAAG,CAAC,CAACF,IAAI,CAACyB,mBAAD,CAAL,EAA4BzB,IAAI,CAAC+B,kBAAD,CAAhC,CAAD,CAAT;AACH","sourcesContent":["import { takeLatest, call, put, all } from 'redux-saga/effects';\n\nimport { auth, googleProvider, convertCollectionsSnapshotToMap, createUser, getCurrentUser } from '../../../firebase/firebase.util';\nimport { SAGA_EMAIL_USER_START, SAGA_GOOGLE_USER_START, CHECK_USER_SESSION } from './type';\nimport { sagaUserSUCCESS, sagaUserFailed } from './user-action';\n\nfunction* getSnapshotFromUserAuth(userAuth, additionData) {\n    try{\n        const data = yield call(createUser, userAuth, additionData);\n        const userSnapshot = yield data.get();\n        yield put(sagaUserSUCCESS({id: userSnapshot.id, ...userSnapshot.data()}));\n    }catch(e) {\n        yield put(sagaUserFailed(e.message));\n    }\n}\n\n/* Google login */\nfunction* startGoogle() {\n    try {\n        const { user } = yield auth.signInWithPopup(googleProvider);\n        yield getSnapshotFromUserAuth(user);\n    } catch (e) {\n        yield put(sagaUserFailed(e.message));\n    }\n}\n\nexport function* sagaGoogleUserStart() {\n \n    yield takeLatest(SAGA_GOOGLE_USER_START, startGoogle);\n}\n\n/* Email login */\nfunction* startEmail({ payload: { email, password }}) {\n    try {\n        const { user } = yield auth.signInWithEmailAndPassword(email, password);\n        yield getSnapshotFromUserAuth(user);\n    }catch(e) {\n        yield put(sagaUserFailed(e.message));\n    }\n}\n\nexport function* sagaEmailUserStart() {\n    yield takeLatest(SAGA_EMAIL_USER_START, startEmail);\n}\n\n/* check user */\n\nfunction* startCheckUserSession() {\n    try {\n        const userAuth = yield getCurrentUser();\n        yield getSnapshotFromUserAuth(userAuth);\n    }catch(e) {\n        yield put(sagaUserFailed(e.message))\n    }\n}\nexport function* sagaCheckUserSession() {\n    yield takeLatest(CHECK_USER_SESSION, startCheckUserSession);\n}\n\n\nexport function* userSagas() {\n    yield all([call(sagaGoogleUserStart), call(sagaEmailUserStart)]);\n}"]},"metadata":{},"sourceType":"module"}