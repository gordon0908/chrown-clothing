{"ast":null,"code":"import firebase from 'firebase';\nimport 'firebase/auth';\nimport 'firebase/firestore';\nconst config = {\n  apiKey: \"AIzaSyAaV2UBk7aFXuLrzmpMQxLx0Phl9Kqstxw\",\n  authDomain: \"chrown-db.firebaseapp.com\",\n  databaseURL: \"https://chrown-db.firebaseio.com\",\n  projectId: \"chrown-db\",\n  storageBucket: \"chrown-db.appspot.com\",\n  messagingSenderId: \"981695326663\",\n  appId: \"1:981695326663:web:46d5863199763a8b63d1e2\",\n  measurementId: \"G-P6H73ZV9PC\"\n};\nfirebase.initializeApp(config);\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\ngoogleProvider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nexport const SignInWithGoogle = () => firebase.auth().signInWithPopup(googleProvider);\nexport const getCurrentUser = () => {\n  return new Promise((resolve, reject) => {\n    const unsubscribe = auth.onAuthStateChanged(userAuth => {\n      unsubscribe();\n      resolve(userAuth);\n    }, () => reject({\n      message: 'failed to get user data'\n    }));\n  });\n};\nexport const createUser = async (userAuth, otherData) => {\n  if (!userAuth) {\n    return;\n  }\n\n  const userProfile = firestore.doc('/users/' + userAuth.uid);\n  const snapShot = await userProfile.get();\n\n  if (!snapShot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createAt = new Date();\n\n    try {\n      await userProfile.set({\n        displayName,\n        email,\n        createAt,\n        ...otherData\n      });\n    } catch (e) {\n      console.log('error creating user', e.message);\n    }\n  }\n\n  return userProfile;\n};\nexport const createCollection = async (collectionName, data) => {\n  const collectionRef = firestore.collection(collectionName);\n  const batchObj = firestore.batch(); // console.log(data)\n\n  data.map(obj => {\n    const newDocRef = collectionRef.doc();\n    batchObj.set(newDocRef, obj);\n  });\n  return await batchObj.commit();\n};\nexport const convertCollectionsSnapshotToMap = collections => {\n  const transformedCollection = collections.docs.map(doc => {\n    const {\n      title,\n      items\n    } = doc.data();\n    return {\n      id: doc.id,\n      title,\n      items,\n      routeName: encodeURI(title.toLowerCase())\n    };\n  });\n  return transformedCollection.reduce((first, item) => {\n    first[item.title.toLowerCase()] = item;\n    return first;\n  }, {});\n};\nexport default firebase;","map":{"version":3,"sources":["/Users/gordon/mywork/mytraining/2020-v1/complete-react-developer-in-2020-fromPaul/crown-app/src/firebase/firebase.util.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","initializeApp","googleProvider","auth","GoogleAuthProvider","setCustomParameters","prompt","firestore","SignInWithGoogle","signInWithPopup","getCurrentUser","Promise","resolve","reject","unsubscribe","onAuthStateChanged","userAuth","message","createUser","otherData","userProfile","doc","uid","snapShot","get","exists","displayName","email","createAt","Date","set","e","console","log","createCollection","collectionName","data","collectionRef","collection","batchObj","batch","map","obj","newDocRef","commit","convertCollectionsSnapshotToMap","collections","transformedCollection","docs","title","items","id","routeName","encodeURI","toLowerCase","reduce","first","item"],"mappings":"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","sourcesContent":["import firebase from 'firebase';\nimport 'firebase/auth';\nimport 'firebase/firestore';\n\nconst config = {\n    apiKey: \"AIzaSyAaV2UBk7aFXuLrzmpMQxLx0Phl9Kqstxw\",\n    authDomain: \"chrown-db.firebaseapp.com\",\n    databaseURL: \"https://chrown-db.firebaseio.com\",\n    projectId: \"chrown-db\",\n    storageBucket: \"chrown-db.appspot.com\",\n    messagingSenderId: \"981695326663\",\n    appId: \"1:981695326663:web:46d5863199763a8b63d1e2\",\n    measurementId: \"G-P6H73ZV9PC\"\n  };\n\nfirebase.initializeApp(config);\n\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\ngoogleProvider.setCustomParameters({\n    prompt: 'select_account'\n});\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nexport const SignInWithGoogle = () => firebase.auth().signInWithPopup(googleProvider);\n\nexport const getCurrentUser = () => {\n    return new Promise((resolve, reject) => {\n        const unsubscribe = auth.onAuthStateChanged(userAuth => {\n            unsubscribe();\n            resolve(userAuth);\n        }, () => reject({ message: 'failed to get user data'}))\n    });\n}\n\nexport const createUser = async (userAuth, otherData) => {\n    if (!userAuth) {\n        return;\n    }\n\n    const userProfile = firestore.doc('/users/' + userAuth.uid);\n    const snapShot = await userProfile.get();\n\n    if (!snapShot.exists) {\n        const { displayName, email } = userAuth;\n        const createAt = new Date();\n\n        try {\n            await userProfile.set({\n                displayName,\n                email,\n                createAt,\n                ...otherData\n            })\n        }catch(e) {\n            console.log('error creating user', e.message);\n        }\n    }\n    return userProfile;\n\n}\n\nexport const createCollection = async (collectionName, data) => {\n    const collectionRef = firestore.collection(collectionName);\n\n    const batchObj = firestore.batch();\n\n    // console.log(data)\n    data.map(obj => {\n        const newDocRef = collectionRef.doc();\n        batchObj.set(newDocRef, obj);\n    });\n\n    return await batchObj.commit();\n}\n\nexport const convertCollectionsSnapshotToMap = collections => {\n    const transformedCollection = collections.docs.map(doc => {\n        const { title, items } = doc.data();\n        return {\n            id: doc.id,\n            title,\n            items,\n            routeName: encodeURI(title.toLowerCase())\n        }\n    });\n\n    return transformedCollection.reduce((first, item)=>{\n        first[item.title.toLowerCase()] = item;\n        return first;\n    },{});\n}\nexport default firebase;"]},"metadata":{},"sourceType":"module"}